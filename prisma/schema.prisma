// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Link          Link[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id     String  @id @default(cuid())
  name   String  @db.VarChar(20)
  Link   Link?   @relation(fields: [linkId], references: [id])
  linkId String?
}

model Label {
  id     String  @id @default(cuid())
  name   String  @db.VarChar(20)
  Link   Link?   @relation(fields: [linkId], references: [id])
  linkId String?
}

model Tag {
  id     String  @id @default(cuid())
  name   String  @db.VarChar(20)
  Link   Link?   @relation(fields: [linkId], references: [id])
  linkId String?
}

model Link {
  id          String     @id @default(cuid())
  url         String
  title       String?    @db.VarChar(120)
  description String     @db.VarChar(240)
  type        Type
  categories  Category[]
  tags        Tag[]
  labels      Label[]
  status      Status
  flags       Flag[]
  user        User       @relation(fields: [userId], references: [id])

  userId String
}

enum Type {
  github
  video
  website
  blog
  article
  other
}

enum Status {
  read
  not_read
  reading
}

enum Flag {
  revisit
}
